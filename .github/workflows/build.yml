name: Build, test, package

on: [push,pull_request]

env:
  sem-git-tag: "master"
  itk-git-tag: "v5.3rc03"

jobs:
  build-test-cxx:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 3
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-11]
        include:
          - os: ubuntu-20.04
            c-compiler: "gcc"
            cxx-compiler: "g++"
          - os: windows-2019
            c-compiler: "cl.exe"
            cxx-compiler: "cl.exe"
          - os: macos-11
            c-compiler: "clang"
            cxx-compiler: "clang++"

    steps:
    - uses: actions/checkout@v2

    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-itk-sem
      with:
        path: |
          ../ITK
          ../ITK-build
          ../SlicerExecutionModel
          ../SlicerExecutionModel-build
        key: itk${{ env.itk-git-tag }}-sem${{ env.sem-git-tag }}

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Set up OpenGL
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y libglu1-mesa-dev mesa-common-dev libgl1-mesa-glx libglvnd-core-dev freeglut3-dev libtbb-dev

    - name: Install Qt
      uses: jurplel/install-qt-action@v2

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install ninja

    - name: Get specific version of CMake
      uses: lukka/get-cmake@v3.18.3

    - name: Download ITK
      run: |
        cd ..
        git clone https://github.com/InsightSoftwareConsortium/ITK.git
        pushd ITK
        git checkout ${{ env.itk-git-tag }}

    - name: Build ITK
      if: matrix.os != 'windows-2019'
      run: |
        cd ..
        mkdir ITK-build
        pushd ITK-build
        export MACOSX_DEPLOYMENT_TARGET=10.9
        cmake -DModule_MorphologicalContourInterpolation:BOOL=ON -DCMAKE_C_COMPILER:FILEPATH="${{ matrix.c-compiler }}" -DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_CXX_COMPILER="${{ matrix.cxx-compiler }}" -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_EXAMPLES:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -GNinja ../ITK
        ninja

    - name: Build ITK-Windows
      if: matrix.os == 'windows-2019'
      run: |
        cd ..
        mkdir ITK-build
        pushd ITK-build
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        cmake -DModule_MorphologicalContourInterpolation:BOOL=ON -DCMAKE_C_COMPILER:FILEPATH="${{ matrix.c-compiler }}" -DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_CXX_COMPILER="${{ matrix.cxx-compiler }}" -DCMAKE_BUILD_TYPE:STRING=Release -DBUILD_EXAMPLES:BOOL=OFF -DBUILD_TESTING:BOOL=OFF -GNinja ../ITK
        ninja
      shell: cmd

    - name: Download SlicerExecutionModel
      run: |
        cd ..
        git clone https://github.com/Slicer/SlicerExecutionModel.git
        pushd SlicerExecutionModel
        git checkout ${{ env.sem-git-tag }}

    - name: Build SlicerExecutionModel
      if: matrix.os != 'windows-2019'
      run: |
        cd ..
        export MACOSX_DEPLOYMENT_TARGET=10.9
        export ITK_DIR="${PWD}/ITK-build"
        mkdir SlicerExecutionModel-build
        pushd SlicerExecutionModel-build
        cmake -DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_C_COMPILER:FILEPATH="${{ matrix.c-compiler }}" -DCMAKE_CXX_COMPILER="${{ matrix.cxx-compiler }}" -DCMAKE_BUILD_TYPE:STRING=Release -GNinja ../SlicerExecutionModel
        ninja

    - name: Build SlicerExecutionModel-Windows
      if: matrix.os == 'windows-2019'
      run: |
        cd ..
        set ITK_DIR=%CD%\ITK-build
        mkdir SlicerExecutionModel-build
        pushd SlicerExecutionModel-build
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        cmake -DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_C_COMPILER:FILEPATH="${{ matrix.c-compiler }}" -DCMAKE_CXX_COMPILER="${{ matrix.cxx-compiler }}" -DCMAKE_BUILD_TYPE:STRING=Release -GNinja ../SlicerExecutionModel
        ninja
      shell: cmd

    - name: Build ImageViewer-Linux
      if: matrix.os == 'ubuntu-20.04'
      run: |
        export ITK_DIR="${PWD}/../ITK-build"
        export SlicerExecutionModel_DIR="${PWD}/../SlicerExecutionModel-build"
        cmake -DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_C_COMPILER:FILEPATH="${{ matrix.c-compiler }}" -DCMAKE_CXX_COMPILER="${{ matrix.cxx-compiler }}" -DCMAKE_BUILD_TYPE:STRING=Release -GNinja .
        ninja

    - name: Build ImageViewer-Mac
      if: matrix.os == 'macos-11'
      run: |
        export ITK_DIR="${PWD}/../ITK-build"
        export SlicerExecutionModel_DIR="${PWD}/../SlicerExecutionModel-build"
        export MACOSX_DEPLOYMENT_TARGET=10.9
        cmake -DCMAKE_MACOSX_BUNDLE:BOOL=ON -DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_C_COMPILER:FILEPATH="${{ matrix.c-compiler }}" -DCMAKE_CXX_COMPILER="${{ matrix.cxx-compiler }}" -DCMAKE_BUILD_TYPE:STRING=Release -GNinja .
        ninja

    - name: Build ImageViewer-Windows
      if: matrix.os == 'windows-2019'
      run: |
        set ITK_DIR=%CD%\..\ITK-build
        set SlicerExecutionModel_DIR=%CD%\..\SlicerExecutionModel-build
        call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
              -DBUILD_SHARED_LIBS:BOOL=OFF \
        cmake -DBUILD_SHARED_LIBS:BOOL=OFF -DCMAKE_C_COMPILER:FILEPATH="${{ matrix.c-compiler }}" -DCMAKE_CXX_COMPILER="${{ matrix.cxx-compiler }}" -DCMAKE_BUILD_TYPE:STRING=Release -GNinja .
        ninja
      shell: cmd

    - name: Publish ImageViewer as GitHub Artifact
      uses: actions/upload-artifact@v1
      with:
        name: ImageViewer.${{ matrix.os }}
        path: ImageViewer/bin
